(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{435:function(e,t,n){"use strict";n.r(t);var r=n(9),s=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h4",{attrs:{id:"后端配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#后端配置"}},[e._v("#")]),e._v(" 后端配置")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("上传文件一定是 post 请求 , 这里我们使用 koa 实现一个简易的 post 请求, 并且让获取前端发来的 formdata 数据 并进行一些简易的处理 ;")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const Koa = require('koa');\nconst Router = require('koa-router');\nconst koaBody = require('koa-body');\n\nlet app = new Koa();\nlet router = new Router();\n\napp.use(koaBody({\n  multipart: true // 允许客户端上传文件\n}));\n\nrouter.post('/upload', async (ctx, next) => {\n  // 客户端上传的文件会在这个对象中存在 ctx.request.files\n  // 读取这个文件, 然后存到 upload 文件夹, 实现简易的存储文件功能\n  let data = fs.readFileSync(ctx.request.files.image.path);\n  fs.writeFileSync(path.join(__dirname, 'upload', ctx.request.files.image.name), data);\n  ctx.body = { status: 1 };\n});\n\napp.use(router.routes());\napp.listen(3000);\n")])])]),t("h4",{attrs:{id:"前端实现单文件上传"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端实现单文件上传"}},[e._v("#")]),e._v(" 前端实现单文件上传")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("前端这里使用 FormData 对象和 XMLHttpRequest 对象来实现文件上传")]),e._v(" "),t("p",[e._v("这里咱们就先不考虑样式了, 只是简单实现功能")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<input type="file" />\n<button>点击上传</button>\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("document.querySelector('button').onclick = function () {\n  // 这里会获取一个 files 数组对象 因为是单文件上传取第一个即可\n  let file = document.querySelector('input').files[0];\n  let xhr = new XMLHttpRequest();\n  xhr.open('post', '/upload', true);\n  xhr.onload = function () {\n    let res = JSON.parse(xhr.responseText);\n    console.log(res);\n  }\n  \n  let form = new FormData();\n  form.append('image', file); // 对应 key value\n  xhr.send(form);\n}\n")])])]),t("p",[e._v("到这里, 就已经实现了 文件上传并且通过服务端进行转存 ; 需求怎么可能这么简单就实现呢, 我们可以再添加一些拓展, 比如进度条, 和上传速度 ;")]),e._v(" "),t("h4",{attrs:{id:"单文件的上传速度与进度条"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单文件的上传速度与进度条"}},[e._v("#")]),e._v(" 单文件的上传速度与进度条")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("html 优化部分 : 这里进度条, 我们就根据 html5 原生的 progress 标签来实现 ;")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<input type="file" />\n<progress value="0" max="100"></progress>\n<span class="percent">0 %</span>\n<span class="speed">0 b/s</span>\n<button>点击上传</button>\n')])])]),t("p",[e._v("js 铺垫 ; 这里如果想要知道上传的进度和当前下载的速度,  我们肯定要办到下面一些事情 ;")]),e._v(" "),t("ul",[t("li",[e._v("上传文件时的状态监控")])]),e._v(" "),t("p",[t("code",[e._v("xhr.upload")]),e._v(" 下面有文件上传时的钩子,  我们可以利用这些钩子函数实现进度条的监控")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FXMLHttpRequest%2Fupload",target:"_blank",rel:"noopener noreferrer"}},[e._v(" https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/upload")])]),e._v(" "),t("ul",[t("li",[e._v("获取文件的大小 total")]),e._v(" "),t("li",[e._v("获取当前下载的大小 size")])]),e._v(" "),t("p",[e._v("可以通过 钩子函数中的 event 获取到 total 和 size "),t("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FXMLHttpRequestEventTarget%2Fonprogress",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onprogress")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let startTime;\nlet startSize;\ndocument.querySelector('button').onclick = function () {\n  // 这里会获取一个 files 数组对象 因为是单文件上传取第一个即可\n  let file = document.querySelector('input').files[0];\n  let xhr = new XMLHttpRequest();\n  xhr.open('post', '/upload', true);\n  xhr.onload = function () {\n    let res = JSON.parse(xhr.responseText);\n    console.log(res);\n  }\n  \n  let form = new FormData();\n  form.append('image', file); // 对应 key value\n  \n  xhr.upload.onloadstart = function () {\n    // 开始上传钩子\n    startTime = new Date().getTime();\n    startSize = 0;\n  }\n  xhr.upload.onprogress = function (event) {\n   // 正在上传钩子, 会被多次调用\n   // 已传输的数据量 / 总共的数据量 * 100\n   let percent = (event.loaded / event.total * 100).toFixed(0);\n   document.querySelector('progress').value = percent;\n   document.querySelector('.percent').innerHTML = percent + ' %';\n   \n   let currentTime = new Date().getTime();\n   let dtime = (currentTime - startTime) / 1000; // 时间差 s\n   startTime = new Date().getTime(); // 计算完成后重新获取时间\n   \n   let dsize = event.loaded - startSize; // 大小差 b\n   startSize = event.loaded; // 计算完成后重新获取带下\n   \n   let speed = dsize / dtime; // 速度\n   let unit = 'b/s';  // 单位\n   // 单位进制计算\n   if (speed / 1024 > 1) {\n     speed = speed / 1024;\n     unit = 'kb/s';\n   }\n   if (speed / 1024 > 1) {\n     speed = speed / 1024;\n     unit = 'mb/s';\n   }\n   \n   document.querySelector('.speed').innerHTML = speed.toFixed(2) + unit;\n  }\n  // 上传完成后重置 进度条等\n  xhr.onload = function () {\n   document.querySelector('progress').value = 0;\n   document.querySelector('.percent').innerHTML = 0 + ' %';\n   document.querySelector('.speed').innerHTML = '0b/s';\n  }\n  xhr.send(form);\n}\n")])])]),t("h4",{attrs:{id:"axios-单文件上传带进度条"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#axios-单文件上传带进度条"}},[e._v("#")]),e._v(" axios 单文件上传带进度条")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("axios 中监控进度, 通过 onUploadProgress 钩子来监控进度")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("axios.post('/upload', form, {\n  onUploadProgress: event => {\n    let complete = (event.loaded / event.total * 100 | 0)\n    document.querySelector('progress').value = complete;\n    document.querySelector('.percent').innerHTML = complete + ' %';\n    if (complete >= 100) {\n      document.querySelector('progress').value = '0';\n      document.querySelector('.percent').innerHTML = 0 + ' %';\n    }\n  },\n}).then(res => {\n  console.log(res)\n});\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{363:function(t,a,s){t.exports=s.p+"assets/img/1.d0da0778.jpg"},364:function(t,a,s){t.exports=s.p+"assets/img/2.a44c56d4.png"},365:function(t,a,s){t.exports=s.p+"assets/img/3.e9ad75f8.jpg"},366:function(t,a,s){t.exports=s.p+"assets/img/3.7a2800a4.png"},367:function(t,a,s){t.exports=s.p+"assets/img/4.30156245.png"},368:function(t,a,s){t.exports=s.p+"assets/img/5.11d9bc40.png"},369:function(t,a,s){t.exports=s.p+"assets/img/github1.3531198b.png"},370:function(t,a,s){t.exports=s.p+"assets/img/7.02b1b701.jpg"},371:function(t,a,s){t.exports=s.p+"assets/img/8.1fccf405.jpg"},447:function(t,a,s){"use strict";s.r(a);var e=s(9),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"github"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#github"}},[t._v("#")]),t._v(" github")]),t._v(" "),a("p",[t._v("个人 github 地址(账号：ImCccc 密码: 常见的密码后面-=):\n"),a("a",{attrs:{href:"https://github.com/ImCccc?tab=repositories",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/ImCccc?tab=repositories")])]),t._v(" "),a("p",[t._v("下面是 gibhub 常见教程：\n"),a("a",{attrs:{href:"https://www.cnblogs.com/vs1435/p/11775861.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.cnblogs.com/vs1435/p/11775861.html")])]),t._v(" "),a("p",[t._v("github 上，拉代码有 2 和地址：")]),t._v(" "),a("ol",[a("li",[t._v("SSH: git@github.com:ImCccc/technology-document.git")]),t._v(" "),a("li",[t._v("https: https://github.com/ImCccc/technology-document.git")])]),t._v(" "),a("p",[t._v("有什么区别呢？https url 直接有效网址打开，但是用户每次通过 git 提交的时候都要输入用户名和密码，有没有简单的一点的办法，一次配置，永久使用呢？当然，所以有了第二种地址，也就是 SSH URL，如何配置下面有说明。")]),t._v(" "),a("h2",{attrs:{id:"配置-ssh"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置-ssh"}},[t._v("#")]),t._v(" 配置 SSH")]),t._v(" "),a("p",[t._v("GitHub 配置 SSH Key 的目的是为了帮助我们在通过 git 提交代码是，不需要繁琐的验证过程，简化操作流程。")]),t._v(" "),a("h3",{attrs:{id:"设置-git-的-user-name-和-email"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置-git-的-user-name-和-email"}},[t._v("#")]),t._v(" 设置 git 的 user name 和 email")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('git config --global user.name "ImCccc"\ngit config --global user.email "1234567@qq.com"\n')])])]),a("h3",{attrs:{id:"生成-ssh-key-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生成-ssh-key-命令"}},[t._v("#")]),t._v(" 生成 ssh key 命令")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('ssh-keygen -t rsa -C "1234567@qq.com"\n')])])]),a("p",[t._v("成功截图（C:\\Users\\登录用户名.ssh 目录，里面有两个文件：id_rsa 和 id_rsa.pub）：")]),t._v(" "),a("img",{attrs:{height:"200px",src:s(363)}}),t._v(" "),a("h3",{attrs:{id:"配置-github"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置-github"}},[t._v("#")]),t._v(" 配置 github")]),t._v(" "),a("img",{attrs:{src:s(364)}}),t._v(" "),a("p",[t._v("设置完成后，直接可以在 vscode 上提交代码了")]),t._v(" "),a("h2",{attrs:{id:"git-命令行提交代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-命令行提交代码"}},[t._v("#")]),t._v(" git 命令行提交代码")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git init\ngit add -A\ngit commit -m '提交注释'\ngit remote add origin git@github.com:ImCccc/technology-document.git\ngit push -u origin master\n")])])]),a("ul",[a("li",[a("p",[a("code",[t._v("git init")]),t._v(" 表示在当前的项目目录中生成本地的 git 管理")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git add -A")]),t._v(" 使用-A:将新增、删除、修改的文件改动全保存至缓存区")])]),t._v(" "),a("li",[a("p",[a("code",[t._v('git commit -m "first commit"')]),t._v(" 将代码从缓存区保存至本地仓库，实际开发中一般使用"),a("code",[t._v('git commit -am "说明的文字"')]),t._v("，使用 -a：如果没文件更改操作（增、删、改名）就可以省略 git add 指令；")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git remote add origin ssh地址")]),t._v(" 将本地仓库与指定的远程仓库创建 联系；")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git push -u origin master")]),t._v(" 将本地仓库代码推送至远程仓库，实际开发中该指令后需要输入 github 账号以及密码。（首次提交注意别遗漏"),a("code",[t._v("-u")]),t._v("指定默认主机）")])])]),t._v(" "),a("p",[t._v("以上指令正常执行后， 本地仓库的代码就提交到远程仓库了：")]),t._v(" "),a("img",{attrs:{src:s(365)}}),t._v(" "),a("h2",{attrs:{id:"git-分支命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-分支命令"}},[t._v("#")]),t._v(" git 分支命令")]),t._v(" "),a("p",[t._v("新建分支：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git branch dev\n")])])]),a("p",[t._v("切换分支：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git checkout dev\n")])])]),a("p",[t._v("新建分支 + 切换分支：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git checkout -b dev\n")])])]),a("p",[t._v("分支提交到远程仓库:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("git push origin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("u dev\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果存在分支")]),t._v("\ngit push origin master\n")])])]),a("p",[t._v("查看分支：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git branch\n")])])]),a("p",[t._v("删除分支：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git branch -r -d origin/dev\ngit push origin :dev\n")])])]),a("p",[t._v("master 分支合并到当前分支:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("合并:           git merge master\n提交至远程仓库:  git push origin\n")])])]),a("h2",{attrs:{id:"git-其他命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-其他命令"}},[t._v("#")]),t._v(" git 其他命令")]),t._v(" "),a("p",[t._v("添加当前目录的所有代码：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git add .\n")])])]),a("p",[t._v("提交到本地仓库（远程还没有看到）：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git commit -m  '提交留言'\n")])])]),a("p",[t._v("提交到远程:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git push origin -u dev\n")])])]),a("h2",{attrs:{id:"冲突解决"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#冲突解决"}},[t._v("#")]),t._v(" 冲突解决")]),t._v(" "),a("p",[t._v("合并分支 merge，或者拉取代码 push, 出现冲突解：")]),t._v(" "),a("img",{attrs:{src:s(366)}}),t._v(" "),a("p",[t._v("出现以上提示， 说明本次更新代码失败；主要在于本地工作区间跟远程仓库的新代码冲突了")]),t._v(" "),a("h3",{attrs:{id:"放弃本地修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#放弃本地修改"}},[t._v("#")]),t._v(" 放弃本地修改")]),t._v(" "),a("p",[t._v("放弃本地修改意味着将 远程仓库 的代码完全覆盖本地仓库以及本地工作区间")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git checkout head .\ngit pull 或者 git merge dev\n")])])]),a("h3",{attrs:{id:"解决冲突后提交本地修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决冲突后提交本地修改"}},[t._v("#")]),t._v(" 解决冲突后提交本地修改")]),t._v(" "),a("ol",[a("li",[t._v("将本地修改放入缓存区(成功后本地工作区间的代码跟本地仓库代码会同步)， 具体指令：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git stash\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("从远程仓库获取最新代码，具体指令:")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git pull 或者 git merge dev\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("取出本地修改的代码，冲突的代码就很清晰的展现在我们面前了， 具体指令:")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git stash pop\n")])])]),a("img",{attrs:{src:s(367)}}),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("手工解决冲突，提交代码：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git add README.md\ngit commit -am '解决冲突'\ngit push origin master\n")])])]),a("h2",{attrs:{id:"版本回退"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#版本回退"}},[t._v("#")]),t._v(" 版本回退")]),t._v(" "),a("p",[t._v("回退到上一个版本（上一个版本就是 HEAD^，上上一个版本就是 HEAD^^，当然往上 100 个版本写 100 个^比较容易数不过来，所以写成 HEAD~100）：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git reset --hard HEAD^\n")])])]),a("h3",{attrs:{id:"回调未来版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回调未来版本"}},[t._v("#")]),t._v(" 回调未来版本")]),t._v(" "),a("p",[t._v("Git 提供了一个命令 git reflog 用来记录你的每一次命令：")]),t._v(" "),a("img",{attrs:{src:s(368)}}),t._v(" "),a("p",[t._v("回到未来：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git reset --hard 97e962c\n")])])]),a("h2",{attrs:{id:"撤销修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#撤销修改"}},[t._v("#")]),t._v(" 撤销修改")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git checkout -- readme.txt\n")])])]),a("p",[a("code",[t._v("git checkout -- readme.txt")]),t._v(" 意思就是把 readme.txt 文件在工作区的修改全部撤销，这里有两种情况：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("readme.txt 自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；")])]),t._v(" "),a("li",[a("p",[t._v("readme.txt 已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。")])])]),t._v(" "),a("p",[t._v("总之，就是让这个文件回到最近一次 git commit 或 git add 时的状态。")]),t._v(" "),a("p",[a("strong",[t._v("git checkout -- file 命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令")])]),t._v(" "),a("h2",{attrs:{id:"常见问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见问题"}},[t._v("#")]),t._v(" 常见问题")]),t._v(" "),a("h3",{attrs:{id:"只合并分支-a-的某一个-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#只合并分支-a-的某一个-commit"}},[t._v("#")]),t._v(" 只合并分支 A 的某一个 commit")]),t._v(" "),a("p",[t._v("在 A 分支上提交了一个 commit，B 分支也同样需要这个 commit 的代码，但是分支 B 不能合并分支 A, 因为分支 A 有些代码不能直接上线，下面就教你如何只合并分支 A 的某一个 commit")]),t._v(" "),a("ol",[a("li",[t._v("先找到需要合并的 commit 的代号，一般是一个很长的字符串，可以在 gitLab 找到，如下图:")])]),t._v(" "),a("img",{attrs:{src:s(369)}}),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("终端执行命令：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git cherry-pick ff476ddb3535f6c6af8576c3be98530b584c9b2d\n")])])]),a("h3",{attrs:{id:"vscode-看不到远程分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vscode-看不到远程分支"}},[t._v("#")]),t._v(" vscode 看不到远程分支")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git remote update origin --prune\n")])])]),a("h2",{attrs:{id:"同时使用-github-和-gitlab"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同时使用-github-和-gitlab"}},[t._v("#")]),t._v(" 同时使用 gitHub 和 gitLab")]),t._v(" "),a("p",[t._v("gitLab 配置和之前一样, 下面重点说说 gitHub 配置")]),t._v(" "),a("ol",[a("li",[t._v("打开 git 客户端, 生成 gitHub 的秘钥 (和 gitLab 不一样就是指定名称)")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('ssh-keygen -t rsa -C "306022598@qq.com" -f ~/.ssh/id_rsa_github\n')])])]),a("p",[t._v("有提问,按回车即可, 完成后会生成文件, 如下:")]),t._v(" "),a("img",{attrs:{src:s(370)}}),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("gitHub 上添加 sshkey (可以添加多个的)")])]),t._v(" "),a("img",{attrs:{src:s(371)}}),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("code",[t._v(".ssh")]),t._v(" 文件夹下面, 添加配置文件 "),a("code",[t._v("config")]),t._v(" (不需要后缀名)")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Host github.com\n  User git\n  HostName github.com\n  User github邮箱\n  IdentityFile ~/.ssh/id_rsa_github\n\nHost gitlab.com\n  User git\n  HostName 公司域名\n  User gitlab邮箱\n  IdentityFile ~/.ssh/id_rsa\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[t._v("在 git 客户端直接就可以克隆了"),a("font",{attrs:{color:"red"}},[t._v("(要 ssh 地址, 不要使用 https 地址)")])],1)]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git clone git@github.com:ImCccc/technology-document.git\n")])])]),a("ol",{attrs:{start:"5"}},[a("li",[t._v("克隆后, 直接在 "),a("code",[t._v("vscode")]),t._v(" 上就可以提交 "),a("code",[t._v("gitLab")]),t._v(" 和 "),a("code",[t._v("gitHub")]),t._v(" 代码")])])])}),[],!1,null,null,null);a.default=r.exports}}]);